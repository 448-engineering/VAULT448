// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package e448.productivity.vault448;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_vault448_native_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_vault448_native_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Short);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "vault448_native"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "rustFFI")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_vault448_native_fn_func_current_dir_metadata(_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_vault448_native_fn_func_ffi_version(_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_vault448_native_fn_func_init_app_static(`path`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun uniffi_vault448_native_fn_func_to_human_format(`value`: Long,`decimalPlaces`: Long,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_vault448_native_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_vault448_native_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_vault448_native_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_vault448_native_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_vault448_native_rust_future_continuation_callback_set(`callback`: UniFffiRustFutureContinuationCallbackType,
    ): Unit
    fun ffi_vault448_native_rust_future_poll_u8(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_u8(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_vault448_native_rust_future_poll_i8(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_i8(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_vault448_native_rust_future_poll_u16(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_u16(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Short
    fun ffi_vault448_native_rust_future_poll_i16(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_i16(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Short
    fun ffi_vault448_native_rust_future_poll_u32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_u32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun ffi_vault448_native_rust_future_poll_i32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_i32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun ffi_vault448_native_rust_future_poll_u64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_u64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun ffi_vault448_native_rust_future_poll_i64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_i64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun ffi_vault448_native_rust_future_poll_f32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_f32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Float
    fun ffi_vault448_native_rust_future_poll_f64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_f64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Double
    fun ffi_vault448_native_rust_future_poll_pointer(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_pointer(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun ffi_vault448_native_rust_future_poll_rust_buffer(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_rust_buffer(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_vault448_native_rust_future_poll_void(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_vault448_native_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_vault448_native_rust_future_complete_void(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_vault448_native_checksum_func_current_dir_metadata(
    ): Short
    fun uniffi_vault448_native_checksum_func_ffi_version(
    ): Short
    fun uniffi_vault448_native_checksum_func_init_app_static(
    ): Short
    fun uniffi_vault448_native_checksum_func_to_human_format(
    ): Short
    fun ffi_vault448_native_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_vault448_native_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_vault448_native_checksum_func_current_dir_metadata() != 34096.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_vault448_native_checksum_func_ffi_version() != 4975.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_vault448_native_checksum_func_init_app_static() != 23421.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_vault448_native_checksum_func_to_human_format() != 33013.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}




data class ApiCurrentDirMetadata (
    var `directories`: List<FfiFsMetadata>, 
    var `files`: List<FfiFsFile>, 
    var `totalDirs`: String, 
    var `totalFiles`: String, 
    var `path`: String, 
    var `errors`: List<String>
) {
    
    companion object
}

public object FfiConverterTypeApiCurrentDirMetadata: FfiConverterRustBuffer<ApiCurrentDirMetadata> {
    override fun read(buf: ByteBuffer): ApiCurrentDirMetadata {
        return ApiCurrentDirMetadata(
            FfiConverterSequenceTypeFfiFsMetadata.read(buf),
            FfiConverterSequenceTypeFfiFsFile.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: ApiCurrentDirMetadata) = (
            FfiConverterSequenceTypeFfiFsMetadata.allocationSize(value.`directories`) +
            FfiConverterSequenceTypeFfiFsFile.allocationSize(value.`files`) +
            FfiConverterString.allocationSize(value.`totalDirs`) +
            FfiConverterString.allocationSize(value.`totalFiles`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterSequenceString.allocationSize(value.`errors`)
    )

    override fun write(value: ApiCurrentDirMetadata, buf: ByteBuffer) {
            FfiConverterSequenceTypeFfiFsMetadata.write(value.`directories`, buf)
            FfiConverterSequenceTypeFfiFsFile.write(value.`files`, buf)
            FfiConverterString.write(value.`totalDirs`, buf)
            FfiConverterString.write(value.`totalFiles`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterSequenceString.write(value.`errors`, buf)
    }
}




data class ApiFormatKind (
    var `name`: String, 
    var `extension`: String, 
    var `mediaType`: String, 
    var `shortName`: String
) {
    
    companion object
}

public object FfiConverterTypeApiFormatKind: FfiConverterRustBuffer<ApiFormatKind> {
    override fun read(buf: ByteBuffer): ApiFormatKind {
        return ApiFormatKind(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ApiFormatKind) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`extension`) +
            FfiConverterString.allocationSize(value.`mediaType`) +
            FfiConverterString.allocationSize(value.`shortName`)
    )

    override fun write(value: ApiFormatKind, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`extension`, buf)
            FfiConverterString.write(value.`mediaType`, buf)
            FfiConverterString.write(value.`shortName`, buf)
    }
}




data class CurrentDirMetadata (
    var `dirName`: String, 
    var `dirPath`: String, 
    var `directories`: List<String>, 
    var `files`: List<FfiFileMetadata>, 
    var `size`: String, 
    var `errors`: List<FfiDirError>
) {
    
    companion object
}

public object FfiConverterTypeCurrentDirMetadata: FfiConverterRustBuffer<CurrentDirMetadata> {
    override fun read(buf: ByteBuffer): CurrentDirMetadata {
        return CurrentDirMetadata(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceTypeFfiFileMetadata.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeFfiDirError.read(buf),
        )
    }

    override fun allocationSize(value: CurrentDirMetadata) = (
            FfiConverterString.allocationSize(value.`dirName`) +
            FfiConverterString.allocationSize(value.`dirPath`) +
            FfiConverterSequenceString.allocationSize(value.`directories`) +
            FfiConverterSequenceTypeFfiFileMetadata.allocationSize(value.`files`) +
            FfiConverterString.allocationSize(value.`size`) +
            FfiConverterSequenceTypeFfiDirError.allocationSize(value.`errors`)
    )

    override fun write(value: CurrentDirMetadata, buf: ByteBuffer) {
            FfiConverterString.write(value.`dirName`, buf)
            FfiConverterString.write(value.`dirPath`, buf)
            FfiConverterSequenceString.write(value.`directories`, buf)
            FfiConverterSequenceTypeFfiFileMetadata.write(value.`files`, buf)
            FfiConverterString.write(value.`size`, buf)
            FfiConverterSequenceTypeFfiDirError.write(value.`errors`, buf)
    }
}




data class DirOutcome (
    var `success`: CurrentDirMetadata?, 
    var `failure`: List<String>
) {
    
    companion object
}

public object FfiConverterTypeDirOutcome: FfiConverterRustBuffer<DirOutcome> {
    override fun read(buf: ByteBuffer): DirOutcome {
        return DirOutcome(
            FfiConverterOptionalTypeCurrentDirMetadata.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: DirOutcome) = (
            FfiConverterOptionalTypeCurrentDirMetadata.allocationSize(value.`success`) +
            FfiConverterSequenceString.allocationSize(value.`failure`)
    )

    override fun write(value: DirOutcome, buf: ByteBuffer) {
            FfiConverterOptionalTypeCurrentDirMetadata.write(value.`success`, buf)
            FfiConverterSequenceString.write(value.`failure`, buf)
    }
}




data class FfiDateTimeString (
    var `date`: String, 
    var `time`: String
) {
    
    companion object
}

public object FfiConverterTypeFfiDateTimeString: FfiConverterRustBuffer<FfiDateTimeString> {
    override fun read(buf: ByteBuffer): FfiDateTimeString {
        return FfiDateTimeString(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiDateTimeString) = (
            FfiConverterString.allocationSize(value.`date`) +
            FfiConverterString.allocationSize(value.`time`)
    )

    override fun write(value: FfiDateTimeString, buf: ByteBuffer) {
            FfiConverterString.write(value.`date`, buf)
            FfiConverterString.write(value.`time`, buf)
    }
}




data class FfiDirError (
    var `path`: String, 
    var `error`: String, 
    var `display`: String
) {
    
    companion object
}

public object FfiConverterTypeFfiDirError: FfiConverterRustBuffer<FfiDirError> {
    override fun read(buf: ByteBuffer): FfiDirError {
        return FfiDirError(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiDirError) = (
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`error`) +
            FfiConverterString.allocationSize(value.`display`)
    )

    override fun write(value: FfiDirError, buf: ByteBuffer) {
            FfiConverterString.write(value.`path`, buf)
            FfiConverterString.write(value.`error`, buf)
            FfiConverterString.write(value.`display`, buf)
    }
}




data class FfiFileFormat (
    var `extension`: String, 
    var `name`: String, 
    var `shortName`: String?, 
    var `mediaType`: String
) {
    
    companion object
}

public object FfiConverterTypeFfiFileFormat: FfiConverterRustBuffer<FfiFileFormat> {
    override fun read(buf: ByteBuffer): FfiFileFormat {
        return FfiFileFormat(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiFileFormat) = (
            FfiConverterString.allocationSize(value.`extension`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterOptionalString.allocationSize(value.`shortName`) +
            FfiConverterString.allocationSize(value.`mediaType`)
    )

    override fun write(value: FfiFileFormat, buf: ByteBuffer) {
            FfiConverterString.write(value.`extension`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterOptionalString.write(value.`shortName`, buf)
            FfiConverterString.write(value.`mediaType`, buf)
    }
}




data class FfiFileMetadata (
    var `name`: String, 
    var `path`: String, 
    var `size`: String, 
    var `readOnly`: Boolean, 
    var `created`: FfiDateTimeString?, 
    var `accessed`: FfiDateTimeString?, 
    var `modified`: FfiDateTimeString?, 
    var `symlink`: Boolean, 
    var `fileFormat`: FfiFileFormat
) {
    
    companion object
}

public object FfiConverterTypeFfiFileMetadata: FfiConverterRustBuffer<FfiFileMetadata> {
    override fun read(buf: ByteBuffer): FfiFileMetadata {
        return FfiFileMetadata(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalTypeFfiDateTimeString.read(buf),
            FfiConverterOptionalTypeFfiDateTimeString.read(buf),
            FfiConverterOptionalTypeFfiDateTimeString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterTypeFfiFileFormat.read(buf),
        )
    }

    override fun allocationSize(value: FfiFileMetadata) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterString.allocationSize(value.`size`) +
            FfiConverterBoolean.allocationSize(value.`readOnly`) +
            FfiConverterOptionalTypeFfiDateTimeString.allocationSize(value.`created`) +
            FfiConverterOptionalTypeFfiDateTimeString.allocationSize(value.`accessed`) +
            FfiConverterOptionalTypeFfiDateTimeString.allocationSize(value.`modified`) +
            FfiConverterBoolean.allocationSize(value.`symlink`) +
            FfiConverterTypeFfiFileFormat.allocationSize(value.`fileFormat`)
    )

    override fun write(value: FfiFileMetadata, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterString.write(value.`size`, buf)
            FfiConverterBoolean.write(value.`readOnly`, buf)
            FfiConverterOptionalTypeFfiDateTimeString.write(value.`created`, buf)
            FfiConverterOptionalTypeFfiDateTimeString.write(value.`accessed`, buf)
            FfiConverterOptionalTypeFfiDateTimeString.write(value.`modified`, buf)
            FfiConverterBoolean.write(value.`symlink`, buf)
            FfiConverterTypeFfiFileFormat.write(value.`fileFormat`, buf)
    }
}




data class FfiFsFile (
    var `metadata`: FfiFsMetadata, 
    var `media`: String, 
    var `stem`: String, 
    var `extension`: String, 
    var `category`: ApiFormatKind
) {
    
    companion object
}

public object FfiConverterTypeFfiFsFile: FfiConverterRustBuffer<FfiFsFile> {
    override fun read(buf: ByteBuffer): FfiFsFile {
        return FfiFsFile(
            FfiConverterTypeFfiFsMetadata.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeApiFormatKind.read(buf),
        )
    }

    override fun allocationSize(value: FfiFsFile) = (
            FfiConverterTypeFfiFsMetadata.allocationSize(value.`metadata`) +
            FfiConverterString.allocationSize(value.`media`) +
            FfiConverterString.allocationSize(value.`stem`) +
            FfiConverterString.allocationSize(value.`extension`) +
            FfiConverterTypeApiFormatKind.allocationSize(value.`category`)
    )

    override fun write(value: FfiFsFile, buf: ByteBuffer) {
            FfiConverterTypeFfiFsMetadata.write(value.`metadata`, buf)
            FfiConverterString.write(value.`media`, buf)
            FfiConverterString.write(value.`stem`, buf)
            FfiConverterString.write(value.`extension`, buf)
            FfiConverterTypeApiFormatKind.write(value.`category`, buf)
    }
}




data class FfiFsMetadata (
    var `size`: String, 
    var `sizeString`: String, 
    var `name`: String, 
    var `created`: String, 
    var `modified`: String, 
    var `accessed`: String, 
    var `symlink`: Boolean, 
    var `path`: String, 
    var `readonly`: Boolean, 
    var `dir`: Boolean
) {
    
    companion object
}

public object FfiConverterTypeFfiFsMetadata: FfiConverterRustBuffer<FfiFsMetadata> {
    override fun read(buf: ByteBuffer): FfiFsMetadata {
        return FfiFsMetadata(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: FfiFsMetadata) = (
            FfiConverterString.allocationSize(value.`size`) +
            FfiConverterString.allocationSize(value.`sizeString`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`created`) +
            FfiConverterString.allocationSize(value.`modified`) +
            FfiConverterString.allocationSize(value.`accessed`) +
            FfiConverterBoolean.allocationSize(value.`symlink`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterBoolean.allocationSize(value.`readonly`) +
            FfiConverterBoolean.allocationSize(value.`dir`)
    )

    override fun write(value: FfiFsMetadata, buf: ByteBuffer) {
            FfiConverterString.write(value.`size`, buf)
            FfiConverterString.write(value.`sizeString`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`created`, buf)
            FfiConverterString.write(value.`modified`, buf)
            FfiConverterString.write(value.`accessed`, buf)
            FfiConverterBoolean.write(value.`symlink`, buf)
            FfiConverterString.write(value.`path`, buf)
            FfiConverterBoolean.write(value.`readonly`, buf)
            FfiConverterBoolean.write(value.`dir`, buf)
    }
}





sealed class OutcomeException: Exception() {
    // Each variant is a nested class
    
    class Failure(
        val `failure`: String
        ) : OutcomeException() {
        override val message
            get() = "failure=${ `failure` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<OutcomeException> {
        override fun lift(error_buf: RustBuffer.ByValue): OutcomeException = FfiConverterTypeOutcomeError.lift(error_buf)
    }

    
}

public object FfiConverterTypeOutcomeError : FfiConverterRustBuffer<OutcomeException> {
    override fun read(buf: ByteBuffer): OutcomeException {
        

        return when(buf.getInt()) {
            1 -> OutcomeException.Failure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: OutcomeException): Int {
        return when(value) {
            is OutcomeException.Failure -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`failure`)
            )
        }
    }

    override fun write(value: OutcomeException, buf: ByteBuffer) {
        when(value) {
            is OutcomeException.Failure -> {
                buf.putInt(1)
                FfiConverterString.write(value.`failure`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCurrentDirMetadata: FfiConverterRustBuffer<CurrentDirMetadata?> {
    override fun read(buf: ByteBuffer): CurrentDirMetadata? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCurrentDirMetadata.read(buf)
    }

    override fun allocationSize(value: CurrentDirMetadata?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCurrentDirMetadata.allocationSize(value)
        }
    }

    override fun write(value: CurrentDirMetadata?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCurrentDirMetadata.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFfiDateTimeString: FfiConverterRustBuffer<FfiDateTimeString?> {
    override fun read(buf: ByteBuffer): FfiDateTimeString? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiDateTimeString.read(buf)
    }

    override fun allocationSize(value: FfiDateTimeString?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFfiDateTimeString.allocationSize(value)
        }
    }

    override fun write(value: FfiDateTimeString?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiDateTimeString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiDirError: FfiConverterRustBuffer<List<FfiDirError>> {
    override fun read(buf: ByteBuffer): List<FfiDirError> {
        val len = buf.getInt()
        return List<FfiDirError>(len) {
            FfiConverterTypeFfiDirError.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiDirError>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiDirError.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiDirError>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiDirError.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiFileMetadata: FfiConverterRustBuffer<List<FfiFileMetadata>> {
    override fun read(buf: ByteBuffer): List<FfiFileMetadata> {
        val len = buf.getInt()
        return List<FfiFileMetadata>(len) {
            FfiConverterTypeFfiFileMetadata.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiFileMetadata>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiFileMetadata.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiFileMetadata>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiFileMetadata.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiFsFile: FfiConverterRustBuffer<List<FfiFsFile>> {
    override fun read(buf: ByteBuffer): List<FfiFsFile> {
        val len = buf.getInt()
        return List<FfiFsFile>(len) {
            FfiConverterTypeFfiFsFile.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiFsFile>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiFsFile.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiFsFile>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiFsFile.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiFsMetadata: FfiConverterRustBuffer<List<FfiFsMetadata>> {
    override fun read(buf: ByteBuffer): List<FfiFsMetadata> {
        val len = buf.getInt()
        return List<FfiFsMetadata>(len) {
            FfiConverterTypeFfiFsMetadata.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiFsMetadata>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiFsMetadata.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiFsMetadata>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeFfiFsMetadata.write(it, buf)
        }
    }
}

fun `currentDirMetadata`(): CurrentDirMetadata? {
    return FfiConverterOptionalTypeCurrentDirMetadata.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_vault448_native_fn_func_current_dir_metadata(_status)
})
}


fun `ffiVersion`(): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_vault448_native_fn_func_ffi_version(_status)
})
}


fun `initAppStatic`(`path`: String): Boolean {
    return FfiConverterBoolean.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_vault448_native_fn_func_init_app_static(FfiConverterString.lower(`path`),_status)
})
}


fun `toHumanFormat`(`value`: ULong, `decimalPlaces`: ULong): String {
    return FfiConverterString.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_vault448_native_fn_func_to_human_format(FfiConverterULong.lower(`value`),FfiConverterULong.lower(`decimalPlaces`),_status)
})
}


